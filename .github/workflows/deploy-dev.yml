name: deploy-dev-environment
run-name: ${{ github.actor }}
#on: [push]
on:
    workflow_dispatch:
        inputs:
            branchName:    
                description: Branch's name
                type: string
                default: feature/savepersonandtestunit
                required: true
jobs:
    deloyment_dev:
        runs-on: ubuntu-latest
        env:
            BRANCH_NAME: ${{ inputs.branchName }}
            REPOSITORY_IMAGE: wlopezob
            PROJECT_VERSION: ''
            ARTIFACT_ID: ''
            NEW_TAGS: ''
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        steps:
            # - name: Ensure running branch dev
            #   run: |
            #     if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "master" 
            #     || "$BRANCH_NAME" == "develop" ]]; then
            #       echo "This workflow can´t only run on the 'main' or 'master' branch."
            #       exit 1
            #     fi

            - name: Ensure running branch dev
              if: ${{ env.BRANCH_NAME == 'main' || env.BRANCH_NAME == 'master' || env.BRANCH_NAME == 'develop' }}
              uses: actions/github-script@v6
              with:
                script: |
                  core.setFailed("This workflow can´t only run on the main, master or develop branch.")

            - name: branch seleted
              run: echo "branch is $BRANCH_NAME"
              
            - uses: actions/checkout@v4.1.7
              with:
                  ref: ${{ env.BRANCH_NAME }}
            
            - name: Setup Java JDK
              uses: actions/setup-java@v4.2.1
              with: 
                  java-version: 17
                  distribution: temurin
                  cache: maven

            - name: build and test with maven
              run: |
                  mvn clean install
                  ls -la ./target/site/jacoco
            - name: Build and analyze
              run: | 
                  mvn sonar:sonar \
                  -Dsonar.host.url=https://sonarcloud.io \
                  -Dsonar.organization=demodemo \
                  -Dsonar.projectKey=demodemo_spring-boot-crud-copilot
                  #-Dsonar.coverage.jacoco.xmlReportPaths=./target/site/jacoco/jacoco.xml
                  -Dsonar.sources=./src/
                  -Dsonar.test.exclusions=./src/test/**
                  -Dsonar.tests=./src/test/
                  -Dsonar.verbose=true

            - name: verify target
              run: |
                    ls -la ./target/site/jacoco
            # - name: Generate JaCoCo Badge
            #   uses: cicirello/jacoco-badge-generator@v2
            #   with:
            #     generate-branches-badge: true
            #     jacoco-csv-file: target/site/jacoco/jacoco.csv

            # - name: Get version from pom.xml
            #   id: get_version
            #   run: |
            #     VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
            #     ARTIFACT_ID=$(mvn -q -Dexec.executable=echo  -Dexec.args='${project.artifactId}' --non-recursive  exec:exec)
            #     echo "ARTIFACT_ID=$ARTIFACT_ID" >> $GITHUB_ENV
            #     echo "PROJECT_VERSION=$VERSION" >> $GITHUB_ENV

            
            # - name: Print project version
            #   run: echo "The project version is ${{ env.PROJECT_VERSION }} and the artifact id is ${{ env.ARTIFACT_ID }}"
            
            # - name: docker login
            #   uses: docker/login-action@v3.2.0
            #   with:
            #     username: ${{ secrets.DOCKER_USERNAME }}
            #     password: ${{ secrets.DOCKER_PASSWORD }}
            
            # - name: Docker Metadata action
            #   id: docker_metadata
            #   uses: docker/metadata-action@v5.5.1
            #   with:
            #     images: ${{ env.REPOSITORY_IMAGE }}/${{ env.ARTIFACT_ID }}
            
            # - name: Build new tag suffix
            #   id: replace_tag
            #   run: |
            #     TAGS="${{ steps.docker_metadata.outputs.tags }}"
            #     NEW_TAGS=$(echo $TAGS | sed "s/:.*$/:$PROJECT_VERSION/")
            #     echo "NEW_TAGS=$NEW_TAGS" >> $GITHUB_ENV
            
            # - name: Print tag docker image
            #   run: echo "The new tags are ${{ env.NEW_TAGS }}"

            # - name: Build and push Docker images
            #   uses: docker/build-push-action@v6.4.1
            #   with:
            #     context: .
            #     push: true
            #     tags: ${{ env.NEW_TAGS }}
            #     labels: ${{ steps.docker_metadata.outputs.labels }}

            
